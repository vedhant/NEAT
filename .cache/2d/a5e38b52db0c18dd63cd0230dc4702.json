{"id":"evaluator.js","dependencies":[{"name":"/home/vedhant/ml/neat/package.json","includedInParent":true,"mtime":1571574106382},{"name":"./species","loc":{"line":1,"column":20},"parent":"/home/vedhant/ml/neat/src/evaluator.js","resolved":"/home/vedhant/ml/neat/src/species.js"},{"name":"./genome","loc":{"line":2,"column":19},"parent":"/home/vedhant/ml/neat/src/evaluator.js","resolved":"/home/vedhant/ml/neat/src/genome.js"},{"name":"./parameters","loc":{"line":3,"column":23},"parent":"/home/vedhant/ml/neat/src/evaluator.js","resolved":"/home/vedhant/ml/neat/src/parameters.js"},{"name":"./innovation_generator","loc":{"line":4,"column":32},"parent":"/home/vedhant/ml/neat/src/evaluator.js","resolved":"/home/vedhant/ml/neat/src/innovation_generator.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _species = _interopRequireDefault(require(\"./species\"));\n\nvar _genome = _interopRequireDefault(require(\"./genome\"));\n\nvar _parameters = _interopRequireDefault(require(\"./parameters\"));\n\nvar _innovation_generator = _interopRequireDefault(require(\"./innovation_generator\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Evaluator =\n/*#__PURE__*/\nfunction () {\n  function Evaluator(startingGenome, connectionInnovation, nodeInnovation) {\n    _classCallCheck(this, Evaluator);\n\n    if (this.constructor === Evaluator) {\n      throw new Error(\"Evaluator cannot be instantiated\");\n    }\n\n    this.populationSize = _parameters.default.PopulationSize;\n    this.genomeIdGenerator = new _innovation_generator.default();\n    this.genomes = [];\n\n    for (var i = 0; i < this.populationSize; ++i) {\n      var initialGenome = startingGenome.copy();\n      initialGenome.id = this.genomeIdGenerator.getInnovation();\n      initialGenome.randomizeAllWeights();\n      this.genomes.push(initialGenome);\n    }\n\n    this.nextGenGenomes = [];\n    this.species = [];\n    this.connectionInnovation = connectionInnovation;\n    this.nodeInnovation = nodeInnovation;\n    this.highestScore = 0;\n    this.fittestGenome;\n    this.generation = 0; // Place genomes into species\n\n    this.species = _species.default.speciate(this.species, this.genomes);\n  }\n\n  _createClass(Evaluator, [{\n    key: \"evaluate\",\n    value: function evaluate() {\n      // reset everything for next generation\n      this.nextGenGenomes = [];\n      this.fittestGenome = null;\n      this.highestScore = 0;\n      this.genomeIdGenerator.reset(); // Evaluate genomes and assign fitness\n\n      for (var i = 0; i < this.species.length; ++i) {\n        for (var j = 0; j < this.species[i].members.length; ++j) {\n          var s = this.species[i];\n          var g = this.species[i].members[j];\n          var score = this.evaluateGenome(g);\n          var adjustedScore = score / s.members.length;\n          s.addAdjustedFitness(adjustedScore);\n          g.fitness = adjustedScore;\n\n          if (score > this.highestScore) {\n            this.highestScore = score;\n            this.fittestGenome = g;\n          }\n        }\n      } // Cull genome in each Species\n\n\n      for (var _i = 0; _i < this.species.length; ++_i) {\n        this.species[_i].cull();\n      } // remove empty species\n\n\n      for (var _i2 = this.species.length - 1; _i2 >= 0; --_i2) {\n        if (this.species[_i2].members.length === 0) {\n          this.species.splice(_i2, 1);\n        }\n      } // breed rest of the genomes\n\n\n      this.nextGenGenomes = _species.default.reproduce(this.species, this.nodeInnovation, this.connectionInnovation);\n      this.genomes = _toConsumableArray(this.nextGenGenomes);\n\n      for (var _i3 = 0; _i3 < this.genomes.length; ++_i3) {\n        this.genomes[_i3].id = this.genomeIdGenerator.getInnovation();\n      }\n\n      this.populationSize = this.genomes.length;\n      ++this.generation; // Place genomes into species\n\n      this.species = _species.default.speciate(this.species, this.genomes);\n    }\n  }, {\n    key: \"evaluateGenome\",\n    value: function evaluateGenome(genome) {\n      throw new Error(\"Method evaluateGenome() must be implemented\");\n    }\n  }]);\n\n  return Evaluator;\n}();\n\nexports.default = Evaluator;\n;"},"sourceMaps":null,"error":null,"hash":"7d6cc0a3f221c6cc5966e34d8e86b413","cacheData":{"env":{}}}